# Copyright [2020] [University of Aizu]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'bundler/setup'
require 'tty-prompt'

require './app/command/base'
require './lib/vm/attack_env/local_host'
require './lib/vm/attack_env/manual_remote_host'
require './modules/ui'

module Command
  class Exploit < Base
    attr_reader :vultest_case, :vulenv, :attack_host, :attack_user, :attack_passwd

    def initialize(args)
      @vultest_case = args[:vultest_case]
      @vulenv = args[:vulenv]

      @attack_host = args[:attack_host]
      @attack_user = args[:attack_user]
      @attack_passwd = args[:attack_passwd]
    end

    def execute(&block)
      if vultest_case.nil? || vulenv.nil?
        VultestUI.error('There is not the vulnerable environment which is attack target')
        return
      end

      attack_env = prepare_attack_env
      return if attack_env.nil?

      attack_env.operating_environment.execute_attack

      block.call(attack_host: attack_host, attack_env: attack_env)
    end

    private

    def prepare_attack_env
      attack_vector = vultest_case.vulenv_config['attack_vector']
      attack_config = vultest_case.attack_config

      if attack_vector == 'local'
        prepare_local_host
        VM::AttackEnv::LocalHost.new(
          host: attack_host,
          user: attack_user,
          password: attack_passwd,
          attack_config: attack_config
        )
      elsif TTY::Prompt.new.yes?('Create an attack machine?')
        AttackEnv.new(
          attack_host: attack_host,
          attack_user: attack_user,
          attack_passwd: attack_passwd,
          attack_config: attack_config,
          attack_vector: attack_vector
        )
      else
        return nil unless prepare_manual_remorte_host?

        VM::AttackEnv::ManualRemoteHost.new(
          host: attack_host,
          user: attack_user,
          password: attack_passwd,
          attack_config: attack_config
        )
      end
    end

    def prepare_local_host
      @attack_host = '192.168.177.177'
      VultestUI.execute('Change value of ATTACKHOST')
      VultestUI.execute('ATTACKHOST => 192.168.177.177')
    end

    def prepare_manual_remorte_host?
      return true unless attack_host.nil?

      VultestUI.error('Cannot find the attack host')
      VultestUI.warring('Execute : SET ATTACKHOST attack_host_ip_address')
      false
    end
  end
end
